package com.test.servicebuilder.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.test.servicebuilder.model.Foo;
import com.test.servicebuilder.model.FooModel;
import com.test.servicebuilder.model.FooSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Foo service. Represents a row in the &quot;test_Foo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.test.servicebuilder.model.FooModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FooImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FooImpl
 * @see com.test.servicebuilder.model.Foo
 * @see com.test.servicebuilder.model.FooModel
 * @generated
 */
@JSON(strict = true)
public class FooModelImpl extends BaseModelImpl<Foo> implements FooModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a foo model instance should use the {@link com.test.servicebuilder.model.Foo} interface instead.
     */
    public static final String TABLE_NAME = "test_Foo";
    public static final Object[][] TABLE_COLUMNS = {
            { "uuid_", Types.VARCHAR },
            { "fooId", Types.BIGINT },
            { "userName", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table test_Foo (uuid_ VARCHAR(75) null,fooId LONG not null primary key,userName VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table test_Foo";
    public static final String ORDER_BY_JPQL = " ORDER BY foo.fooId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY test_Foo.fooId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.test.servicebuilder.model.Foo"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.test.servicebuilder.model.Foo"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.test.servicebuilder.model.Foo"),
            true);
    public static long USERNAME_COLUMN_BITMASK = 1L;
    public static long UUID_COLUMN_BITMASK = 2L;
    public static long FOOID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.test.servicebuilder.model.Foo"));
    private static ClassLoader _classLoader = Foo.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Foo.class };
    private String _uuid;
    private String _originalUuid;
    private long _fooId;
    private String _userName;
    private String _originalUserName;
    private long _columnBitmask;
    private Foo _escapedModel;

    public FooModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Foo toModel(FooSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Foo model = new FooImpl();

        model.setUuid(soapModel.getUuid());
        model.setFooId(soapModel.getFooId());
        model.setUserName(soapModel.getUserName());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Foo> toModels(FooSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Foo> models = new ArrayList<Foo>(soapModels.length);

        for (FooSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _fooId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setFooId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _fooId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Foo.class;
    }

    @Override
    public String getModelClassName() {
        return Foo.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("uuid", getUuid());
        attributes.put("fooId", getFooId());
        attributes.put("userName", getUserName());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String uuid = (String) attributes.get("uuid");

        if (uuid != null) {
            setUuid(uuid);
        }

        Long fooId = (Long) attributes.get("fooId");

        if (fooId != null) {
            setFooId(fooId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }
    }

    @JSON
    @Override
    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        } else {
            return _uuid;
        }
    }

    @Override
    public void setUuid(String uuid) {
        if (_originalUuid == null) {
            _originalUuid = _uuid;
        }

        _uuid = uuid;
    }

    public String getOriginalUuid() {
        return GetterUtil.getString(_originalUuid);
    }

    @JSON
    @Override
    public long getFooId() {
        return _fooId;
    }

    @Override
    public void setFooId(long fooId) {
        _columnBitmask = -1L;

        _fooId = fooId;
    }

    @JSON
    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _columnBitmask |= USERNAME_COLUMN_BITMASK;

        if (_originalUserName == null) {
            _originalUserName = _userName;
        }

        _userName = userName;
    }

    public String getOriginalUserName() {
        return GetterUtil.getString(_originalUserName);
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Foo.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Foo toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Foo) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        FooImpl fooImpl = new FooImpl();

        fooImpl.setUuid(getUuid());
        fooImpl.setFooId(getFooId());
        fooImpl.setUserName(getUserName());

        fooImpl.resetOriginalValues();

        return fooImpl;
    }

    @Override
    public int compareTo(Foo foo) {
        int value = 0;

        if (getFooId() < foo.getFooId()) {
            value = -1;
        } else if (getFooId() > foo.getFooId()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Foo)) {
            return false;
        }

        Foo foo = (Foo) obj;

        long primaryKey = foo.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        FooModelImpl fooModelImpl = this;

        fooModelImpl._originalUuid = fooModelImpl._uuid;

        fooModelImpl._originalUserName = fooModelImpl._userName;

        fooModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Foo> toCacheModel() {
        FooCacheModel fooCacheModel = new FooCacheModel();

        fooCacheModel.uuid = getUuid();

        String uuid = fooCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            fooCacheModel.uuid = null;
        }

        fooCacheModel.fooId = getFooId();

        fooCacheModel.userName = getUserName();

        String userName = fooCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            fooCacheModel.userName = null;
        }

        return fooCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{uuid=");
        sb.append(getUuid());
        sb.append(", fooId=");
        sb.append(getFooId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.test.servicebuilder.model.Foo");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fooId</column-name><column-value><![CDATA[");
        sb.append(getFooId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
